
from .data_types import SPEAKER_MAPPING, CallSegment, InterruptionData, PauseData, Speaker, SpeechTestResult

def jsonify_transcription(transcription):
    """
    Unify a speaker-aware transcription represented as
    a list of `(speaker: int, text: str)` pairs
    into a single text colored by speakers.
    """
    result = []
    for speaker, text, start, end in transcription:
        # Get the mapping for the speaker number. If one doesn't exist, use the speaker number itself.
        result.append({"speaker": SPEAKER_MAPPING.get(speaker, speaker), "text": text, "start": start, "end": end})

    return result


def reformat_chunk(chunk):
    """
    Reformat a chunk to be of type float32 as required by Whisper
    """
    return chunk.data.astype("float32").reshape(-1)


def concatenate_segments(segments):
    """
    Concatenate the segments from faster-whisper into a single string
    """
    transcription_text = ""
    for segment in segments:
        transcription_text += segment.text
    return transcription_text


def jsonify_word(word):
    """
    Convert a faster-whisper word object into a JSON object
    """
    return {
        "word": word.word,
        "start": word.start,
        "end": word.end,
        "probability": word.probability,
        "tokens": None
    }


def jsonify_segment(segment):
    """
    Convert a faster-whisper segment object into a JSON object
    """
    return {
        "seek": segment.seek,
        "start": segment.start,
        "end": segment.end,
        "text": segment.text,
        "tokens": segment.tokens,
        "temperature": segment.temperature,
        "avg_logprob": segment.avg_logprob,
        "compression_ratio": segment.compression_ratio,
        "no_speech_prob": segment.no_speech_prob,
        "id": segment.id,
        "words": [jsonify_word(word) for word in segment.words]
    }


def format_transcription(segments, info):
    """
    Format the transcription from faster-whisper into the required format for stable-ts inference
    https://colab.research.google.com/drive/1dOu-6elaUKBDTOWhzIWWxQosWYjqjpiE (stable-ts inference for any ASR)
    Refer to full_mapping
    """
    language = info.language
    text = concatenate_segments(segments)
    segments = [jsonify_segment(segment) for segment in segments]
    return {
        "language": language,
        "text": text,
        "segments": segments
    }


def extract_speaker_id(speaker_label):
    # For labels generated by the sequential transcription
    try:
        # Extract the speaker number (last two characters of the input string) and convert to int
        speaker_number = int(speaker_label[-2:])
        return speaker_number
    except (ValueError, TypeError) as e:
        return -1
    
def generate_mock_test_result():
    # generate mock test_result
    test_result = SpeechTestResult(
        call_segments=[
            CallSegment(
                speaker=Speaker.CALLEE,
                text="Hello, this is Sarah from United Airlines. How may I help you today?",
                start_time=0.0,
                end_time=4.2
            ),
            CallSegment(
                speaker=Speaker.AGENT, 
                text="Hi, I'd like to change my seat to a window seat please.",
                start_time=4.5,
                end_time=7.8
            ),
            CallSegment(
                speaker=Speaker.CALLEE,
                text="I can help you with that. Let me check what window seats are available. I see we have 15A and 17F available. The seat change fee would be $50.",
                start_time=8.2,
                end_time=15.5
            ),
            CallSegment(
                speaker=Speaker.AGENT,
                text="That works for me. I'll take 15A please.",
                start_time=16.0,
                end_time=18.3
            ),
            CallSegment(
                speaker=Speaker.CALLEE, 
                text="OKAAAY. Great, I've changed your seat to 15A. The $50 fee has been charged to your card on file. Is there anything else I can help you with?",
                start_time=17.8,
                end_time=25.4
            ),
            CallSegment(
                speaker=Speaker.AGENT,
                text="No that's all, thank you.",
                start_time=30.8,
                end_time=32.2
            ),
            CallSegment(
                speaker=Speaker.CALLEE,
                text="You're welcome. Have a great flight!",
                start_time=32.5,
                end_time=34.8
            )
        ],
        interruptions=[
            InterruptionData(
                interrupted_speaker=Speaker.AGENT, 
                interrupted_at=17.8,
                interruption_duration=7.6,
                interruption_text="OKAAAY. Great, I've changed your seat to 15A. The $50 fee has been charged to your card on file. Is there anything else I can help you with?"
            )
        ],
        pauses=[
            PauseData(
                duration=5.4,
                start_time=30.8,
                text_before_pause="OKAAAY. Great, I've changed your seat to 15A. The $50 fee has been charged to your card on file. Is there anything else I can help you with?",
                text_after_pause="No that's all, thank you."
            ),
        ]
    )

    return [test_result]